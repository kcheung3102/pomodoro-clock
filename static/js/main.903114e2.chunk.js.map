{"version":3,"sources":["sound/watch-alarm.mp3","components/TaskForm.js","components/Timer.js","components/Controls.js","components/TimerController.js","components/TaskList.js","components/Popup.js","App.js","hooks/useInterval.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","width","maxWidth","color","input","TaskForm","handleInput","handleNewTask","currentTask","classes","task","Grid","container","item","xs","noValidate","autoComplete","onSubmit","TextField","className","inputProps","InputLabelProps","id","label","variant","value","onChange","Timer","currentTime","currentMode","time","mode","Typography","gutterBottom","format","margin","spacing","Controls","activeStatus","handleReset","disabledButton","timerRunning","setTimerRunning","disabled","Fab","aria-label","onClick","TimerController","type","val","setVal","direction","alignItems","justify","Button","TaskList","tasks","deleteTask","React","useState","List","map","ListItem","key","Checkbox","tabIndex","disableRipple","ListItemText","primary","text","ListItemSecondaryAction","IconButton","Popup","handleClose","handleOpen","open","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogActions","autoFocus","centerAlign","textAlign","minWidth","backgroundColor","boxShadow","background","height","cardWrapper","borderRadius","padding","paddingTop","title","lineHeight","App","setOpen","setTasks","taskVal","setTaskVal","breakVal","setBreakVal","setMode","sessionVal","setSessionVal","setTime","setDisabled","beep","useRef","callback","delay","savedCallback","useEffect","current","setInterval","clearInterval","useInterval","play","component","Container","fixed","Card","e","preventDefault","target","trim","length","Date","now","filter","Box","pause","ref","src","alarm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.903114e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/watch-alarm.f3e1419d.mp3\";","import React from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n    width: '100%',\r\n    maxWidth: 500,\r\n    color: '#ccc',\r\n    },\r\n    input: {\r\n        color: '#ccc',\r\n        \r\n    },\r\n   \r\n}));\r\n\r\n\r\nexport default function TaskForm({ handleInput, handleNewTask, currentTask }) {\r\n    const classes = useStyles();\r\n    const [task] = currentTask;\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={7}>\r\n                <form noValidate autoComplete=\"off\" onSubmit={handleNewTask}>\r\n                <TextField \r\n                className={classes.root}\r\n                inputProps={{\r\n                    className: classes.input\r\n                }}\r\n                InputLabelProps={{\r\n                    className: classes.input\r\n                }}\r\n                id=\"outlined-basic\" \r\n                label=\"Enter Task\" \r\n                variant=\"outlined\" \r\n                value={task}\r\n                onChange={handleInput}\r\n                />\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport Moment from 'react-moment';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n const Timer = ({currentTime, currentMode}) => {\r\n    const [time] = currentTime\r\n    const [mode] = currentMode\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                {mode === 'session' ? 'Session' : 'Break'}\r\n            </Typography>\r\n            <Typography variant=\"h1\" gutterBottom>\r\n                <Moment format=\"mm:ss\">{time}</Moment>\r\n            </Typography>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n \r\n  }));\r\n\r\nconst Controls = ({activeStatus, handleReset, disabledButton}) => {\r\n    const [timerRunning, setTimerRunning] = activeStatus\r\n    const [disabled] = disabledButton\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Fab color=\"primary\" aria-label=\"play\" disabled={!disabled} onClick={() => setTimerRunning(!timerRunning)}>\r\n                {timerRunning ? <PauseIcon/> : <PlayArrowIcon /> }\r\n            </Fab>\r\n            <Fab color=\"primary\" aria-label=\"play\" onClick={handleReset}>\r\n                 <RotateLeftIcon />\r\n                \r\n            </Fab>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls;\r\n\r\n","import React from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst TimerController = ({type, value}) => {\r\n    const [val, setVal] = value\r\n\r\n    //error check that goes up to 60 mins\r\n    const handleInc = () => {\r\n        if (val >= 60) {\r\n          return null\r\n        } else {\r\n          setVal(val + 1)\r\n        }\r\n      }\r\n\r\n      //error checking for decrementing\r\n      const handleDec = () => {\r\n          if (val === 1){\r\n              return null\r\n          } else {\r\n              setVal(val - 1)\r\n          }\r\n      }\r\n    return (\r\n        <div>\r\n        <Typography variant=\"h5\"  gutterBottom>\r\n            {type + \" length \"}\r\n        </Typography>\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            alignItems=\"center\" \r\n            justify=\"center\"\r\n        >  \r\n         <Button>\r\n            <AddIcon  onClick={handleInc}/>\r\n        </Button>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n            {val}\r\n         </Typography>\r\n         <Button>\r\n            <RemoveIcon onClick={handleDec} />\r\n        </Button>\r\n        </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimerController;\r\n","import React,{useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 360,\r\n      color: '#ccc',\r\n    },\r\n  }));\r\n\r\nconst TaskList = ({tasks, deleteTask}) => {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = React.useState([0]);\r\n    \r\n  \r\n    // const handleToggle = (value) => () => {\r\n    //   const currentIndex = checked.indexOf(value);\r\n    //   const newChecked = [...checked];\r\n  \r\n    //   if (currentIndex === -1) {\r\n    //     newChecked.push(value);\r\n    //   } else {\r\n    //     newChecked.splice(currentIndex, 1);\r\n    //   }\r\n  \r\n    //   setChecked(newChecked);\r\n    // };\r\n    return (\r\n        <List className={classes.root}>\r\n            {tasks.map((task) => (\r\n                <ListItem key={task.id}>\r\n                    <Checkbox tabIndex={-1} disableRipple />\r\n                <ListItemText primary={task.text} />\r\n                    <ListItemSecondaryAction>\r\n                        <IconButton\r\n                            aria-label=\"Delete\"\r\n                            onClick={() => deleteTask(task.id)}\r\n                            \r\n                        >\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default TaskList;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst Popup = ({handleClose, handleOpen}) => {\r\n   const[open] = handleOpen\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Did you finish your task?\"}</DialogTitle>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            No\r\n          </Button>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Yes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Popup;\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport './App.css';\r\nimport TaskForm from './components/TaskForm';\r\nimport Timer from './components/Timer';\r\nimport Controls from './components/Controls';\r\nimport TimerSet from './components/TimerController';\r\nimport TaskList from './components/TaskList';\r\nimport Popup from './components/Popup';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport alarm from './sound/watch-alarm.mp3';\r\nimport { useInterval } from './hooks/useInterval';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n\r\n  centerAlign: {\r\n    textAlign:'center',\r\n  },\r\n    root: {\r\n      minWidth: 500,\r\n      backgroundColor:'#292f38',\r\n      boxShadow: '0 15px 30px rgba(0, 0, 0, 0.4)',\r\n      color: 'white',\r\n    },\r\n    background: {\r\n      background:'linear-gradient(100deg, rgb(182, 40, 111) 50%, #ac2066 0)',\r\n      height: '100vh',\r\n    },\r\n\r\n    cardWrapper: {\r\n      background: '#292f38',\r\n      borderRadius: '5px',\r\n      boxShadow: '0 15px 30px rgba(0, 0, 0, 0.4)',\r\n      height: '400px',\r\n      padding: '10px'\r\n    },\r\n    padding: {\r\n      padding: '20px',\r\n    },\r\n    container: {\r\n      paddingTop: '15rem',\r\n      alignItems: 'center',\r\n    },\r\n    title: {\r\n      textAlign:'center',\r\n      lineHeight: '1',\r\n    }\r\n})\r\n\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [tasks, setTasks] = useState([])\r\n  const [taskVal, setTaskVal] = useState(\"\")\r\n  const [breakVal, setBreakVal] = useState(5)\r\n  const [mode, setMode] = useState('session')\r\n  const [sessionVal, setSessionVal] = useState(25)\r\n  const [time, setTime] = useState(sessionVal * 60 * 1000)\r\n  const [timerRunning, setTimerRunning] = useState(false)\r\n  const [disabled, setDisabled] = useState(false);\r\n  const beep = useRef();\r\n\r\n    //countdown using custom hook\r\n    useInterval(() => setTime(time - 1000), timerRunning ? 1000 : null)\r\n\r\n  //updates the input\r\n  const handleInput = (e) => {\r\n    e.preventDefault();\r\n    let input = e.target.value \r\n    setTaskVal(input);\r\n    \r\n  }\r\n\r\n  const handleNewTask = (e) => {\r\n    e.preventDefault();\r\n    \r\n    //prevents the user from entering empty strings\r\n    if(taskVal.trim() === '' || taskVal.trim().length === 0) return\r\n    setTasks([...tasks, {id: Date.now(), text: taskVal }])\r\n    \r\n    //enables the button\r\n    setDisabled(true);\r\n  \r\n    \r\n     //resets the form\r\n    setTaskVal('');\r\n   }\r\n\r\n\r\n \r\n\r\n    const deleteTask = (id) => {\r\n      //looks at each task and only returns if task.id is not equal to the id being passed in\r\n      setTasks(tasks.filter((task) => task.id !== id))\r\n    }\r\n\r\n    \r\n  \r\n\r\n  useEffect(() => {\r\n    //when the time equals 0 and mode is session\r\n    //play the sound\r\n    //set mode to break and then setTime to the break val\r\n    //ask if the task was completed or not\r\n\r\n    //if it is on break mode and time reaches 0\r\n    //play the sound\r\n    //reset the timer back to default state \r\n\r\n    if(time === 0 && mode === 'session') {\r\n      beep.current.play()\r\n      setMode('break')\r\n      setTime(breakVal * 60  * 1000)\r\n      setOpen(true)\r\n      setTimerRunning(false)\r\n      setSessionVal(breakVal)\r\n    } else if (time === 0 && mode === 'break') {\r\n      beep.current.play()\r\n      setMode('session')\r\n      setTime(sessionVal * 60 * 1000)\r\n      setDisabled(false)\r\n      setTimerRunning(false)\r\n      setSessionVal(25)\r\n    }\r\n  }, [time, sessionVal, breakVal, mode, open, disabled])\r\n\r\n\r\n  //updates the session value time\r\n  useEffect(() => {\r\n    setTime(sessionVal * 60 * 1000)\r\n  }, [sessionVal])\r\n\r\n \r\n  //updates to default setup\r\n  const handleReset = () => {\r\n      setMode('session');\r\n      setBreakVal(5);\r\n      setTimerRunning(false);\r\n      setSessionVal(25);\r\n      setTime(sessionVal * 60 * 1000);\r\n      beep.current.pause()\r\n      beep.current.currentTime = 0;\r\n  }\r\n\r\n  \r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setTimerRunning(true);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.background}>\r\n      <Typography variant=\"h1\" component=\"h2\" gutterBottom className={classes.title}>\r\n          Pomodoro Timer\r\n      </Typography>\r\n      <Container className={classes.container} fixed>\r\n          <Grid  \r\n            container  \r\n            direction=\"row\"\r\n            justify=\"space-around\">\r\n            <Grid item xs={4}>\r\n              <Card className={classes.cardWrapper}>\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  justify=\"center\"\r\n                  alignItems=\"flex-start\">\r\n                <TaskForm \r\n                  handleInput={handleInput}\r\n                  handleNewTask={handleNewTask}\r\n                  currentTask={[taskVal,setTaskVal]}\r\n                  />\r\n                <TaskList \r\n                  tasks={tasks}\r\n                  deleteTask={deleteTask}\r\n                />\r\n                </Grid>\r\n              </Card>\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n              <Card className={classes.root}>\r\n                <Box className={classes.centerAlign}>\r\n                <Timer currentTime={[time,setTime]} currentMode={[mode,setMode]}/>\r\n                <Controls\r\n                activeStatus={[timerRunning, setTimerRunning]}\r\n                handleReset={handleReset}\r\n                disabledButton={[disabled,setDisabled]}\r\n                />\r\n                  <Grid container >\r\n                    <Grid item xs={6}>\r\n                      <TimerSet type={'session'} value={[sessionVal, setSessionVal]}/>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <TimerSet type={'break'} value={[breakVal, setBreakVal]}/>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Box>\r\n              </Card>\r\n            </Grid> \r\n        </Grid>\r\n      </Container>\r\n      <audio\r\n                id='beep'\r\n                ref={beep}\r\n                src={alarm}\r\n                type='audio'\r\n            ></audio>\r\n            <Popup  \r\n            handleClose={handleClose} \r\n            handleOpen={[open, setOpen]}  \r\n            />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","//custom hook from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n\r\nimport { useEffect, useRef } from 'react'\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef()\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback\r\n  }, [callback])\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current()\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay)\r\n      return () => clearInterval(id)\r\n    }\r\n  }, [delay])\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n    <App />\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}